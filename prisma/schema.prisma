// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id            Int             @id @default(autoincrement())
  title         String
  requests      Request[]
  createdAt     DateTime        @default(now())
  CollectionRun CollectionRun[]
  Monitor       Monitor[]
}

model CollectionRun {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  success      Boolean
  Collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  Responses    Response[]
}

model Request {
  id           Int         @id @default(autoincrement())
  title        String
  createdAt    DateTime    @default(now())
  url          String
  method       String
  headers      Json?
  body         Json?
  stepNumber   Int
  collectionId Int
  collection   Collection  @relation(fields: [collectionId], references: [id])
  assertions   Assertion[]
  responses    Response[]
}

model Assertion {
  id               Int                @id @default(autoincrement())
  property         String
  comparison       String
  expected         String
  requestId        Int
  request          Request            @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime           @default(now())
  AssertionResults AssertionResults[]
}

model Response {
  id               Int                @id @default(autoincrement())
  status           Int
  headers          Json
  body             Json?
  latency          Int
  requestId        Int
  request          Request            @relation(fields: [requestId], references: [id])
  createdAt        DateTime           @default(now())
  AssertionResults AssertionResults[]
  CollectionRun    CollectionRun?     @relation(fields: [collectionRunId], references: [id])
  collectionRunId  Int?
}

model AssertionResults {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  assertion   Assertion @relation(fields: [assertionId], references: [id])
  assertionId Int
  response    Response  @relation(fields: [responseId], references: [id])
  responseId  Int
  pass        Boolean
}

model Monitor {
  id           Int        @id @default(autoincrement())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  schedule     String
  env          String
  createdAt    DateTime   @default(now())
}
